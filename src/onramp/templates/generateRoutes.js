// build/generateRoutes.js
const fs = require('fs');
const path = require('path');

function generateRoutes(appDir = 'app') {
  const routes = [];
  
  function scanDirectory(dir, basePath = '') {
    if (!fs.existsSync(dir)) {
      console.log(`Directory ${dir} does not exist, creating basic route structure`);
      return routes;
    }
    
    const files = fs.readdirSync(dir);
    
    for (const file of files) {
      const filePath = path.join(dir, file);
      const stat = fs.statSync(filePath);
      
      if (stat.isDirectory()) {
        // Handle layout groups like (tabs)
        if (file.startsWith('(') && file.endsWith(')')) {
          const groupName = file.slice(1, -1);
          scanDirectory(filePath, basePath);
        } else {
          scanDirectory(filePath, path.join(basePath, file));
        }
      } else if (file.endsWith('.tsx') || file.endsWith('.ts')) {
        const routePath = generateRoutePath(filePath, basePath, file);
        const componentPath = path.relative(process.cwd(), filePath);
        
        if (routePath !== null) { // Only add routes that have paths
          routes.push({
            path: routePath,
            componentPath,
            isLayout: file === '_layout.tsx',
            isDynamic: file.includes('[') && file.includes(']'),
            params: extractParams(file)
          });
        }
      }
    }
  }
  
  scanDirectory(appDir);
  return routes;
}

function generateRoutePath(filePath, basePath, fileName) {
  // Convert file path to route path
  if (fileName === 'index.tsx' || fileName === 'index.ts') {
    return basePath === '' ? '/' : `/${basePath}`;
  }
  
  if (fileName === '_layout.tsx' || fileName === '_layout.ts') {
    return null; // Layouts don't create routes
  }
  
  const name = fileName.replace(/\.(tsx|ts)$/, '');
  
  // Handle dynamic routes [id] -> :id
  const dynamicName = name.replace(/\[(.+)\]/g, ':$1');
  
  return path.join('/', basePath, dynamicName).replace(/\\/g, '/');
}

function extractParams(fileName) {
  const matches = fileName.match(/\[([^\]]+)\]/g);
  return matches ? matches.map(match => match.slice(1, -1)) : [];
}

// Generate the routes configuration file
function generateRoutesConfig(outputPath = 'src/generated/routes.ts') {
  const routes = generateRoutes();
  
  // Ensure we have at least one route
  if (routes.length === 0) {
    console.log('No routes found, creating default home route');
    routes.push({
      path: '/',
      componentPath: 'app/index.tsx',
      isLayout: false,
      isDynamic: false,
      params: []
    });
  }
  
  const configContent = `// Auto-generated routes configuration
// Do not edit this file manually

export interface RouteConfig {
  path: string;
  componentPath: string;
  isDynamic: boolean;
  params: string[];
  isLayout?: boolean;
}

export const routes: RouteConfig[] = ${JSON.stringify(routes, null, 2)};

// Dynamic imports for code splitting
export const routeComponents = {
${generateDynamicImports(routes)}
};
`;

  // Ensure output directory exists
  const outputDir = path.dirname(outputPath);
  if (!fs.existsSync(outputDir)) {
    fs.mkdirSync(outputDir, { recursive: true });
  }

  fs.writeFileSync(outputPath, configContent);
  console.log(`Generated routes configuration at ${outputPath}`);
  console.log(`Found ${routes.length} routes`);
}

function generateDynamicImports(routes) {
  if (!Array.isArray(routes)) {
    console.error('Routes is not an array:', routes);
    return '';
  }
  
  return routes
    .filter(route => route.componentPath && !route.isLayout)
    .map(route => {
      const key = route.componentPath.replace(/[^a-zA-Z0-9]/g, '_');
      return `  '${route.componentPath}': () => import('../../${route.componentPath}')`;
    })
    .join(',\n');
}

module.exports = {
  generateRoutes,
  generateRoutesConfig
};